
 * Convert to C++/STL
   DONE

 * Need a way to turn off Valgrind so tests can be run in gdb.
   DONE

 * Test Spy and Test Stub...need a way to intercept specific
   library calls, and do any of of a) log the args b) change
   the return value c) divert to a test-defined function which
   can do assertions.  Need to add the intercepts at runtime
   from the test code, and undo them automatically at test
   conclusion.  Both calls to 3rd party DSOs and to statically
   linked app code, dammit.  Hmm, can we find these at build
   time and construct a LD_PRELOAD??  Or build stubs which do
   the work then use RTLD_NEXT
   DONE - intercepts rock mostly

 * BDD style assertions too?

 * need to be able to handle a test forking, and *BOTH* children
 * can do U4C_ASSERT()

 * capture stdout stderr and valgrind logs for each test child
   separately
   DONE

 * need to redirect test child stdin from /dev/null

 * need some way of expressing dependencies between tests or
   resource requirements to allow the test plan to choose the
   next test intelligently.
   NO.  THIS IS A TERRIBLE IDEA.

 * __u4c_fail() et al need __attribute__((noreturn));

 * turn an uncaught C++ exception into an event which causes FAIL
   and not just via the uncaught exception handler exit()ing
   DONE

 * discover test functions written in C++.  Use a classifier to
   find mangled C++ functions of the form CLASS::test_foo() where
   CLASS has some u4c provided base class in its hierarchy, and
   we have a ctor function for it and can work out the size.  Two
   of those need to come from DWARF.

 * Reaping an unexpected pid is actually a failure in CUT.

 * Timing out waiting for an event on the event pipe is a
   failure in CUT (but need to make it a cumulative timeout
   which counts across multiple EVENTs)

 * jUnit XML output format
   DONE

 * measure elapsed times for tests.  The jUnit format needs this
   DONE

 * figure out a way to do test parameterisation

   - variable based like my cyrus hacks to CUnit, i.e. some way
     to declare that a char* file scope variable is a test parameter
     and have it be varied across a set of values defined by splitting
     it's initial value.
     DONE

   - but for consistency need to hold those variables at any level
     of the testnode hierarchy, applying to any tests at that level
     or below
     DONE

   - should probably schedule a (testnode, set of param=value) tuple
     rather than just a testnode.  Something like an iterator.
     DONE

   - fullname string should include a description of parameters
     DONE

   - need a declarative way to weed out bad parameter combos, rather
     than have CuT return NA which is much slower due to need to
     fork a Valground process.

 * add basic test assert macros
   DONE

 * add syslog-capturing assert macros
   DONE

 * add CUnit compatibility test assert macros - both FATAL and
   non-FATAL versions but both with FATAL semantics

 * add a test-callable function to make a new temporary
   base directory and populate it with some expected skeleton,
   which is automatically cleaned up if the test passed and
   we're not running verbose.

 * add intercepts for open/creat/mkdir/unlink/rmdir/symlink/
   bind(AF_UNIX)/connect(AF_UNIX) system calls to fail the test
   if it tries to affect state outside the base directory

 * drive the SUSE Open Build Service via version-controlled files
   DONE

 * detect file descriptor leaks after a test by comparing the
   directory listing for /proc/self/fd/ before and after.
   DONE

 * actually implement the jUnit system-out and system-err properties
   DONE

 * test setup/teardown automatically

 * enable declarative mocking of libc functions - only works with
   add_mock() now

 * subunit output format, apparently there's an EBNF in a README

 * provide a default main() which includes --list
   DONE

 * the default main() should implement --load-list for testr integration

 * write a proper manual in DocBook; steal Valgrind's build
   infrastructure for it
   NO.  The manual is in RST.

 * catch call to pure virtual function in C++

 * catch bad dynamic cast in C++

 * catch bad typeid in C++

 * Need a C API for intercepts

 * Detect leaked or changed environment variables

 * Detect leaked threads

 * Detect leaked child processes

 * Detect changes to umask and cwd

 * Failure injection to system calls and malloc
   using intercepts

 * Merge the new log format implementation from the experimental branch

 * Merge the tag implementation from the experimental branch

 * Change implementation of NP_TAG() so it can be used *INSIDE*
   a test function and applies there only, or at file scope
   and applies to the whole file.  Harder to achieve but better
   semantics than "the next function"

 * Add support for wildcard (or xpath-like?) expressions on test names.

 * Add support for building tests with autotools


#
#  Copyright 2011-2021 Gregory Banks
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

name: Build and Test
on:
    push:
        branches: [ "main", "1.5rc1" ]
jobs:
    build-and-test:
        name: Build and Test
        strategy:
            matrix:
                container:
                    # Fedora 33 supported until approx 2021-11
                    - "fedora:33"
                    # Fedora 34 supported until approx 2022-05
# The gcc-11 on Fedora 34 has issues with DWARF version 5
#                    - "fedora:34"
                    # Ubuntu 18.04, oldest LTS release still in Standard Support, until 2023-04
                    - "ubuntu:bionic"
                    # Ubuntu 20.04, latest LTS release, until 2025-04
                    - "ubuntu:focal"
                    # Ubuntu 20.10, interim release, supported until 2021-07
                    - "ubuntu:groovy"
                    # Ubuntu 21.04, interim release, supported until 2022-01
                    - "ubuntu:hirsute"
                os: [ubuntu-latest]
                compiler: [clang, gcc]
                include:
                    - os: macos-latest
        runs-on: ${{ matrix.os }}
        container: ${{ matrix.container }}
        steps:
            - name: Check out repository
              uses: actions/checkout@v2
            - name: Prepare a unique name for Artifacts
              id: prep_artifact_name
              run: |
                # Calculate a unique string which applies to the matrix entry
                # that we can use to construct unique and valid artifact names.
                # We achieve that by squashing runs of characters are invalid
                # in artifact names, and also whitespace and dashes, into a
                # single dash character.  The unique string will appear as
                # the environment variable ARTIFACT_NAME in subsequent actions.
                if [ "${{ matrix.container }}" != "" ] ; then
                    name="${{ matrix.container }}"
                else
                    name="${{ matrix.os }}"
                fi
                # The option to enable + in sed regexps differs by OS so we avoid it
                name=$(echo -n "$name" | sed -e 's/[ \t:\/\\"<>|*?]/-/g' -e 's/--*/-/g')
                echo "ARTIFACT_NAME=$name" >> $GITHUB_ENV
            - name: "Prepare development environment (Ubuntu)"
              if: ${{ contains(matrix.container, 'ubuntu') }}
              run: |
                case "${{ matrix.compiler }}" in
                ""|gcc*)
                    # Installing gcc may not also get us g++
                    compilers="gcc g++"
                    ;;
                clang)
                    compilers="clang"
                    ;;
                esac
                apt-get update
                apt-get install -y autoconf automake binutils-dev doxygen \
                    libiberty-dev libxml-libxml-perl libxml2 libxml2-dev \
                    libxml2-utils make pkg-config zlib1g-dev $compilers
                case "${{ matrix.compiler }}" in
                gcc*)
                    # Make sure we have the HIGHEST installed gcc
                    # version enabled as the default /usr/bin/gcc
                    gcc_version="$(ls /usr/bin/gcc* | sed -ne '/\/gcc-[0-9][0-9]*$/s/.*\/gcc-//p' | sort -nr | head -1)"
                    if [ "$gcc_version" != "" ] ; then
                        echo "Updating alternatives to gcc-${gcc_version} and g++-${gcc_version}"
                        update-alternatives \
                            --install /usr/bin/gcc gcc /usr/bin/gcc-${gcc_version} 60 \
                            --slave /usr/bin/g++ g++ /usr/bin/g++-${gcc_version}
                    fi
                    ;;
                esac
            - name: "Prepare development environment (Fedora)"
              if: ${{ contains(matrix.container, 'fedora') }}
              run: |
                arch=x86_64
                case "${{ matrix.compiler }}" in
                ""|gcc*)
                    # Installing gcc may not also get us g++
                    compilers="gcc g++"
                    ;;
                clang)
                    compilers="clang.$arch"
                    ;;
                esac
                sudo yum -y install \
                    autoconf automake binutils-devel.$arch diffutils doxygen \
                    libxml2.$arch libxml2-devel.$arch perl-XML-LibXML python-pip \
                    strace valgrind-devel.$arch which $compilers
                sudo pip install breathe Sphinx
            - name: "Prepare development environment (MacOS)"
              if: ${{ contains(matrix.os, 'macos') }}
              run: |
                brew tap novaprova/novaprova
                brew install autoconf automake binutils doxygen gettext libiberty libxml2
                # MacOS is clang only
                # Some releases of Valgrind work on MacOS, some don't, so
                # avoid cluttering up our CI results for now.
            - name: Configure
              run: |
                automake -ac || echo 'please ignore the automake error about a missing Makefile.am'
                autoreconf -iv
                if [ "${{ matrix.compiler }}" = clang ] ; then
                    export CC=clang
                    export CXX=clang++
                fi
                ./configure --without-valgrind
            - name: Build
              run: make
            - name: Test
              run: make -k check
            - name: Upload test logs if failed
              uses: actions/upload-artifact@v2
              if: failure()
              with:
                name: "${{ env.ARTIFACT_NAME }}-test-logs"
                path: |
                    tests/t*.log
                    tests/t*.ee
